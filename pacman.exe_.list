EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
pacman.exe_ -- emu8086 assembler version: 4.08  
 
[ 15/04/2014  --  20:42:12 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; multi-segment executable file template.
[   2]        :                                       
[   3]        :                                       data segment
[   4]        :                                       ; add your data here!
[   5]        :                                       
[   6]        :                                       ;the maze
[   7]    0000: 23 23 23 23 23 23 23 23 23 23 23 23   MazeLine1  db "#######################################################"
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23                
[   8]    0037: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine2  db "# . . . . . . . . . . . . ### . . . . . . . . . . . . #"
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[   9]    006E: 23 20 2E 20 23 23 23 23 23 23 23 20   MazeLine3  db "# . ####### . ######### . ### . ######### . ####### . #"
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23                
[  10]    00A5: 23 20 50 20 23 23 23 23 23 23 23 20   MazeLine4  db "# P ####### . ######### . ### . ######### . ####### P #"
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 50 20 23                
[  11]    00DC: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine5  db "# . . . . . . . . . . . . . . . . . . . . . . . . . . #"
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[  12]    0113: 23 20 2E 20 23 23 23 23 23 23 23 20   MazeLine6  db "# . ####### . ### . ############### . ### . ####### . #"
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23                
[  13]    014A: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine7  db "# . . . . . . ### . . . . ### . . . . ### . . . . . . #"
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[  14]    0181: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine8  db "####### . # . #########   ###   ######### . # . #######"
                2E 20 23 23 23 23 23 23 23 23 23 20 
                20 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  15]    01B8: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine9  db "####### . # . ###                     ### . # . #######"
                2E 20 23 23 23 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  16]    01EF: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine10 db "####### . # . ###   ##### - - #####   ### . # . #######"
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 20 2D 20 2D 20 23 23 23 23 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  17]    0226: 23 23 23 23 23 23 23 20 2E 20 20 20   MazeLine11 db "####### .   . ###   #   H H H H   #   ### . # . #######"
                2E 20 23 23 23 20 20 20 23 20 20 20 
                48 20 48 20 48 20 48 20 20 20 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  18]    025D: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine12 db "####### . # . ###   #   H H H H   #   ### . # . #######"
                2E 20 23 23 23 20 20 20 23 20 20 20 
                48 20 48 20 48 20 48 20 20 20 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  19]    0294: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine13 db "####### . # . ###   ###############   ### . # . #######"
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  20]    02CB: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine14 db "####### . # . ###          @          ### . # . #######"
                2E 20 23 23 23 20 20 20 20 20 20 20 
                20 20 20 40 20 20 20 20 20 20 20 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  21]    0302: 23 23 23 23 23 23 23 20 2E 20 23 20   MazeLine15 db "####### . # . ###   ##################### . # . #######"
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23                
[  22]    0339: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine16 db "# . . . . . . . . . . . . ### . . . . . . . . . . . . #"
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[  23]    0370: 23 20 2E 20 23 23 23 23 23 23 23 20   MazeLine17 db "# . ####### . ######### . ### . ######### . ####### . #"
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23                
[  24]    03A7: 23 20 50 20 2E 20 2E 20 23 23 23 20   MazeLine18 db "# P . . ### . . . . . . .  . . . . . . .. . ### . . P #"
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 20 2E 20 2E 20 2E 20 2E 20 2E 
                20 2E 20 2E 2E 20 2E 20 23 23 23 20 
                2E 20 2E 20 50 20 23                
[  25]    03DE: 23 23 23 23 23 20 2E 20 23 23 23 20   MazeLine19 db "##### . ### . ### . ############### . ### . ### . #####"
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 20 
                2E 20 23 23 23 23 23                
[  26]    0415: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine20 db "# . . . . . . ### . . . . ### . . . . ### . . . . . . #"
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[  27]    044C: 23 20 2E 20 23 23 23 23 23 23 23 23   MazeLine21 db "# . ################### . ### . ################### . #"
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 20 2E 20 23                
[  28]    0483: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   MazeLine22 db "# . . . . . . . . . . . . . . . . . . . . . . . . . . #"
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23                
[  29]    04BA: 23 23 23 23 23 23 23 23 23 23 23 23   MazeLine23 db "#######################################################","$"
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 24             
[  30]        :                                       
[  31]        :                                       ;STUIPD MAZE
[  32]    04F2: 23 23 23 23 23 23 23 23 23 23 23 23   SMazeLine1  db "#######################################################",0dh, 0ah
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 0D 0A          
[  33]    052B: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine2  db "# . . . . . . . . . . . . ### . . . . . . . . . . . . #",0dh, 0ah
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  34]    0564: 23 20 2E 20 23 23 23 23 23 23 23 20   SMazeLine3  db "# . ####### . ######### . ### . ######### . ####### . #",0dh, 0ah
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23 0D 0A          
[  35]    059D: 23 20 50 20 23 23 23 23 23 23 23 20   SMazeLine4  db "# P ####### . ######### . ### . ######### . ####### P #",0dh, 0ah
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 50 20 23 0D 0A          
[  36]    05D6: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine5  db "# . . . . . . . . . . . . . . . . . . . . . . . . . . #",0dh, 0ah
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  37]    060F: 23 20 2E 20 23 23 23 23 23 23 23 20   SMazeLine6  db "# . ####### . ### . ############### . ### . ####### . #",0dh, 0ah
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23 0D 0A          
[  38]    0648: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine7  db "# . . . . . . ### . . . . ### . . . . ### . . . . . . #",0dh, 0ah
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  39]    0681: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine8  db "####### . # . #########   ###   ######### . # . #######",0dh, 0ah
                2E 20 23 23 23 23 23 23 23 23 23 20 
                20 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  40]    06BA: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine9  db "####### . # . ###                     ### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  41]    06F3: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine10 db "####### . # . ###   ##### - - #####   ### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 20 2D 20 2D 20 23 23 23 23 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  42]    072C: 23 23 23 23 23 23 23 20 2E 20 20 20   SMazeLine11 db "####### .   . ###   #   H H H H   #   ### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 23 20 20 20 
                48 20 48 20 48 20 48 20 20 20 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  43]    0765: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine12 db "####### . # . ###   #   H H H H   #   ### . # . #######",0dh, 0ah,"$"
                2E 20 23 23 23 20 20 20 23 20 20 20 
                48 20 48 20 48 20 48 20 20 20 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A 24       
[  44]    079F: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine13 db "####### . # . ###   ###############   ### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  45]    07D8: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine14 db "####### . # . ###          @          ### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 20 20 20 20 
                20 20 20 40 20 20 20 20 20 20 20 20 
                20 20 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  46]    0811: 23 23 23 23 23 23 23 20 2E 20 23 20   SMazeLine15 db "####### . # . ###   ##################### . # . #######",0dh, 0ah
                2E 20 23 23 23 20 20 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 20 2E 20 
                23 23 23 23 23 23 23 0D 0A          
[  47]    084A: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine16 db "# . . . . . . . . . . . . ### . . . . . . . . . . . . #",0dh, 0ah
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  48]    0883: 23 20 2E 20 23 23 23 23 23 23 23 20   SMazeLine17 db "# . ####### . ######### . ### . ######### . ####### . #",0dh, 0ah
                2E 20 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 20 2E 20 23 0D 0A          
[  49]    08BC: 23 20 50 20 2E 20 2E 20 23 23 23 20   SMazeLine18 db "# P . . ### . . . . . . .  . . . . . . .. . ### . . P #",0dh, 0ah
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 20 2E 20 2E 20 2E 20 2E 20 2E 
                20 2E 20 2E 2E 20 2E 20 23 23 23 20 
                2E 20 2E 20 50 20 23 0D 0A          
[  50]    08F5: 23 23 23 23 23 20 2E 20 23 23 23 20   SMazeLine19 db "##### . ### . ### . ############### . ### . ### . #####",0dh, 0ah
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 20 
                2E 20 23 23 23 23 23 0D 0A          
[  51]    092E: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine20 db "# . . . . . . ### . . . . ### . . . . ### . . . . . . #",0dh, 0ah
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 23 23 23 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  52]    0967: 23 20 2E 20 23 23 23 23 23 23 23 23   SMazeLine21 db "# . ################### . ### . ################### . #",0dh, 0ah
                23 23 23 23 23 23 23 23 23 23 23 20 
                2E 20 23 23 23 20 2E 20 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 20 2E 20 23 0D 0A          
[  53]    09A0: 23 20 2E 20 2E 20 2E 20 2E 20 2E 20   SMazeLine22 db "# . . . . . . . . . . . . . . . . . . . . . . . . . . #",0dh, 0ah
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 2E 20 2E 20 2E 20 
                2E 20 2E 20 2E 20 23 0D 0A          
[  54]    09D9: 23 23 23 23 23 23 23 23 23 23 23 23   SMazeLine23 db "#######################################################",0dh, 0ah,"$"
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 23 23 23 23 23 
                23 23 23 23 23 23 23 0D 0A 24       
[  55]        :                                       
[  56]        :                                       
[  57]        :                                       
[  58]        :                                       ;pacman's initial coordinates
[  59]    0A13: 0D                                    PlayerRow db 13
[  60]    0A14: 1B                                    PlayerCol db 27
[  61]        :                                       
[  62]        :                                       ;number of . to collect
[  63]    0A15: E0                                    Points db 224
[  64]        :                                       
[  65]        :                                       ends
[  66]        :                                       
[  67]        :                                       stack segment
[  68]    0A20: 00 00 00 00 00 00 00 00 00 00 00 00   dw   128  dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  69]        :                                       ends
[  70]        :                                       
[  71]        :                                       code segment
[  72]    0B20:                                       start:
[  73]        :                                       ; set segment registers:
[  74]    0B20: B8 00 00                              mov ax, data
[  75]    0B23: 8E D8                                 mov ds, ax
[  76]    0B25: 8E C0                                 mov es, ax
[  77]        :                                       
[  78]        :                                       ; add your code here
[  79]        :                                       
[  80]    0B27: B0 03                                 mov al, 03h ;set console's mode (24x79)
[  81]    0B29: B4 00                                 mov ah, 0
[  82]    0B2B: CD 10                                 int 10h
[  83]        :                                       
[  84]    0B2D: B5 20                                 mov ch, 32
[  85]    0B2F: B4 01                                 mov ah, 1
[  86]    0B31: CD 10                                 int 10h     ;removes blinking cursor
[  87]        :                                       
[  88]        :                                       ;call PrintMaze
[  89]        :                                       
[  90]    0B33: E8 0E 00                              call StuipdPrintMaze ;fast maze prinitng for debugging
[  91]        :                                       
[  92]    0B36:                                       T1:
[  93]    0B36: E8 E0 00                              call PlayerMove
[  94]    0B39: EB FB                                 JMP T1
[  95]        :                                       
[  96]        :                                       ; wait for any key....
[  97]    0B3B: B4 01                                 mov ah, 1
[  98]    0B3D: CD 21                                 int 21h
[  99]        :                                       
[ 100]    0B3F: B8 00 4C                              mov ax, 4c00h ; exit to operating system.
[ 101]    0B42: CD 21                                 int 21h
[ 102]        :                                       
[ 103]    0B44:                                       proc StuipdPrintMaze
[ 104]        :                                       ;  /**
[ 105]        :                                       ;  * proc prints maze without colors,
[ 106]        :                                       ;  * for swift print for debug purposes
[ 107]        :                                       ;  **/
[ 108]    0B44: 55                                    push bp
[ 109]    0B45: 8B EC                                 mov bp,sp
[ 110]        :                                       
[ 111]    0B47: 50                                    push ax
[ 112]    0B48: 51                                    push cx
[ 113]    0B49: 52                                    push dx
[ 114]        :                                       
[ 115]    0B4A: BA F2 04                              	lea dx, SMazeLine1  ;prints lines 1-12
[ 116]    0B4D: B4 09                                 	mov ah, 9
[ 117]    0B4F: CD 21                                 	int 21h
[ 118]        :                                       	
[ 119]    0B51: BA 9F 07                              	lea dx, SMazeLine13 ;print lines 12-23
[ 120]    0B54: CD 21                                 	int 21h
[ 121]        :                                       	
[ 122]    0B56: 5A                                    	pop dx
[ 123]    0B57: 59                                    	pop cx
[ 124]    0B58: 58                                    	pop ax
[ 125]        :                                       	
[ 126]    0B59: 5D                                    	pop bp
[ 127]    0B5A: C3                                    ret
[ 128]        :                                       endp
[ 129]        :                                       
[ 130]    0B5B:                                       proc PrintMaze
[ 131]        :                                       ;/**
[ 132]        :                                       ;  * This proc prints the whole maze,
[ 133]        :                                       ;  * and colors is according to its chars:
[ 134]        :                                       ;  * # - Blue, . - Yellow, @ - Orange
[ 135]        :                                       ;  * Maze Dimensions: 46x24 Chars
[ 136]        :                                       ;  * Emulator prints maze in 14.27 seconds
[ 137]        :                                       ;**/
[ 138]        :                                       
[ 139]    0B5B: 55                                    push bp
[ 140]    0B5C: 8B EC                                 mov bp,sp
[ 141]        :                                       
[ 142]    0B5E: 50                                    push ax
[ 143]    0B5F: 53                                    push bx
[ 144]    0B60: 51                                    push cx
[ 145]    0B61: 56                                    push si
[ 146]        :                                       
[ 147]    0B62: BE FF FF                              mov si, -1
[ 148]    0B65:                                       print:
[ 149]    0B65: 46                                    inc si
[ 150]    0B66: 8A 04                                 mov al, MazeLine1[si]     ;get char to print
[ 151]        :                                       
[ 152]    0B68: 80 3C 23                              cmp MazeLine1[si], '#'
[ 153]    0B6B: 74 0E                                 JE Blue
[ 154]    0B6D: 80 3C 2E                              cmp MazeLine1[si], '.'
[ 155]    0B70: 74 0D                                 JE Yellow
[ 156]    0B72: 80 3C 40                              cmp MazeLine1[si], '@'
[ 157]    0B75: 74 0C                                 JE Orange
[ 158]        :                                       
[ 159]    0B77: B3 00                                 mov bl, 00h               ;set color black
[ 160]        :                                       
[ 161]    0B79: EB 0C                                 JMP ResumePrint
[ 162]        :                                       
[ 163]    0B7B:                                       Blue:
[ 164]    0B7B: B3 99                                 mov bl, 99h           ;set color light blue
[ 165]    0B7D: EB 08                                 JMP ResumePrint
[ 166]        :                                       
[ 167]    0B7F:                                       Yellow:
[ 168]    0B7F: B3 0E                                 mov bl, 0eh           ;set color yellow
[ 169]    0B81: EB 04                                 JMP ResumePrint
[ 170]        :                                       
[ 171]    0B83:                                       Orange:
[ 172]    0B83: B3 0C                                 mov bl, 0ch           ;set color light red
[ 173]    0B85: EB 00                                 JMP ResumePrint
[ 174]        :                                       
[ 175]    0B87:                                       ResumePrint:
[ 176]    0B87: B9 01 00                              mov cx, 1             ;how many times to print
[ 177]    0B8A: B4 09                                 mov ah, 09h
[ 178]    0B8C: CD 10                                 int 10h               ;print char
[ 179]        :                                       
[ 180]    0B8E: E8 0B 00                              call MoveCursor
[ 181]        :                                       
[ 182]    0B91: 80 3C 24                              cmp MazeLine1[si], '$'    ;print char untill terminator ('$')
[ 183]    0B94: 75 CF                                 JNE print
[ 184]        :                                       
[ 185]    0B96: 5E                                    pop si
[ 186]    0B97: 5B                                    pop bx
[ 187]    0B98: 59                                    pop cx
[ 188]    0B99: 58                                    pop ax
[ 189]        :                                       
[ 190]    0B9A: 5D                                    pop bp
[ 191]        :                                       
[ 192]    0B9B: C3                                    ret
[ 193]        :                                       endp
[ 194]        :                                       
[ 195]    0B9C:                                       proc MoveCursor
[ 196]        :                                       ;  /**
[ 197]        :                                       ;  * proc moves cursor according to maze printing,
[ 198]        :                                       ;  * e.g: moves right by default, and down when printing the last
[ 199]        :                                       ;  * char of a line
[ 200]        :                                       ;  **/
[ 201]    0B9C: 55                                    push bp
[ 202]    0B9D: 8B EC                                 mov bp,sp
[ 203]        :                                       
[ 204]    0B9F: 50                                    push ax
[ 205]    0BA0: 53                                    push bx
[ 206]    0BA1: 51                                    push cx
[ 207]    0BA2: 52                                    push dx
[ 208]        :                                       
[ 209]        :                                       
[ 210]    0BA3: B4 03                                 mov ah, 03h
[ 211]    0BA5: CD 10                                 int 10h             ;get cursor position. uses bx,cx,dx
[ 212]        :                                       
[ 213]    0BA7: 80 FA 36                              cmp dl, 54          ;print new line after 55 chars
[ 214]    0BAA: 75 06                                 JNE NextCol
[ 215]        :                                       
[ 216]    0BAC: FE C6                                 inc dh              ;new line
[ 217]    0BAE: B2 00                                 mov dl, 0
[ 218]    0BB0: EB 02                                 JMP MC
[ 219]        :                                       
[ 220]    0BB2:                                       NextCol:
[ 221]    0BB2: FE C2                                 inc dl          ;move cursor foward
[ 222]        :                                       
[ 223]    0BB4:                                       MC:
[ 224]    0BB4: B7 00                                 mov bh, 0       ;page number
[ 225]    0BB6: B4 02                                 mov ah, 2
[ 226]    0BB8: CD 10                                 int 10h         ;set cursor position
[ 227]        :                                       
[ 228]    0BBA: 5A                                    pop dx
[ 229]    0BBB: 59                                    pop cx
[ 230]    0BBC: 5B                                    pop bx
[ 231]    0BBD: 58                                    pop ax
[ 232]        :                                       
[ 233]    0BBE: 5D                                    pop bp
[ 234]        :                                       
[ 235]    0BBF: C3                                    ret
[ 236]        :                                       endp
[ 237]        :                                       
[ 238]        :                                       
[ 239]    0BC0:                                       proc GetKeyStroke
[ 240]        :                                       ;  /**
[ 241]        :                                       ;  * proc reads keyboard key
[ 242]        :                                       ;  * clears buffer post reading
[ 243]        :                                       ;  * uses Halt proc to give 1 seconds delay
[ 244]        :                                       ;  **/
[ 245]    0BC0: 55                                    push bp
[ 246]    0BC1: 8B EC                                 mov bp, sp
[ 247]        :                                       
[ 248]    0BC3: 51                                    push cx
[ 249]    0BC4: 52                                    push dx
[ 250]        :                                       
[ 251]    0BC5: E8 35 00                              call Halt
[ 252]        :                                       
[ 253]    0BC8: B4 01                                 mov ah, 01h
[ 254]    0BCA: CD 16                                 int 16h        ;read from buffer
[ 255]        :                                       
[ 256]    0BCC: 74 2B                                 JZ NoStroke    ; if ZF = 1, no keystroke was entered, required?
[ 257]        :                                       
[ 258]    0BCE: 80 FC 48                              cmp ah, 48h    ;up key was pressed
[ 259]    0BD1: 74 0F                                 JE Up
[ 260]        :                                       
[ 261]    0BD3: 80 FC 4D                              cmp ah , 4Dh   ;right key was pressed
[ 262]    0BD6: 74 0E                                 JE Right
[ 263]        :                                       
[ 264]    0BD8: 80 FC 50                              cmp ah, 50h    ;down key was pressed
[ 265]    0BDB: 74 0D                                 JE Down
[ 266]        :                                       
[ 267]    0BDD: 80 FC 4B                              cmp ah, 4bh    ;left key was presses
[ 268]    0BE0: 74 0C                                 JE Left
[ 269]        :                                       
[ 270]        :                                       ;not required, debug and simplifaction only!
[ 271]    0BE2:                                       Up:
[ 272]    0BE2: B4 55                                 mov ah, 'U'
[ 273]    0BE4: EB 0C                                 JMP ContGK
[ 274]        :                                       
[ 275]    0BE6:                                       Right:
[ 276]    0BE6: B4 52                                 mov ah, 'R'
[ 277]    0BE8: EB 08                                 JMP ContGK
[ 278]        :                                       
[ 279]    0BEA:                                       Down:
[ 280]    0BEA: B4 44                                 mov ah, 'D'
[ 281]    0BEC: EB 04                                 JMP ContGK
[ 282]        :                                       
[ 283]    0BEE:                                       Left:
[ 284]    0BEE: B4 4C                                 mov ah, 'L'
[ 285]    0BF0: EB 00                                 JMP ContGK
[ 286]        :                                       
[ 287]    0BF2:                                       ContGK:
[ 288]    0BF2: 50                                    push ax
[ 289]    0BF3: B8 00 0C                              mov ax, 0c00h  ;ah = 0ch, al = 00h, so no input is attempted by int
[ 290]    0BF6: CD 21                                 int 21h        ;flushes keyboard buffer
[ 291]    0BF8: 58                                    pop ax
[ 292]    0BF9:                                       NoStroke:
[ 293]        :                                       
[ 294]    0BF9: 5A                                    pop dx
[ 295]    0BFA: 59                                    pop cx
[ 296]        :                                       
[ 297]    0BFB: 5D                                    pop bp
[ 298]        :                                       
[ 299]    0BFC: C3                                    ret
[ 300]        :                                       
[ 301]        :                                       endp
[ 302]        :                                       
[ 303]    0BFD:                                       proc Halt
[ 304]        :                                       ;  /**
[ 305]        :                                       ;  * proc delays programs by 1 sec
[ 306]        :                                       ;  * uses system times to measure time
[ 307]        :                                       ;  * system time is in clicks, ~18 clicks = 1 second
[ 308]        :                                       ;  **/
[ 309]        :                                       
[ 310]    0BFD: 55                                    push bp
[ 311]    0BFE: 8B EC                                 mov bp, sp
[ 312]        :                                       
[ 313]    0C00: 50                                    push ax
[ 314]    0C01: 53                                    push bx
[ 315]    0C02: 51                                    push cx
[ 316]    0C03: 52                                    push dx
[ 317]        :                                       
[ 318]    0C04: B4 00                                 mov ah, 00h
[ 319]    0C06: CD 1A                                 int 1ah      ;get system time -> CX:DX, ~18 clicks = 1 second
[ 320]        :                                       
[ 321]    0C08: 8B DA                                 mov bx, dx   ; keep starting time
[ 322]        :                                       
[ 323]    0C0A:                                       Counter:
[ 324]    0C0A: CD 1A                                 int 1ah      ;get system time
[ 325]    0C0C: 2B D3                                 sub dx, bx
[ 326]    0C0E: 83 FA 13                              cmp dx, 19   ;19 clicks > 1 second
[ 327]    0C11: 7C F7                                 JNGE Counter ;if dx !>= 19
[ 328]        :                                       
[ 329]    0C13: 5A                                    pop dx
[ 330]    0C14: 59                                    pop cx
[ 331]    0C15: 5B                                    pop bx
[ 332]    0C16: 58                                    pop ax
[ 333]        :                                       
[ 334]    0C17: 5D                                    pop bp
[ 335]        :                                       
[ 336]    0C18: C3                                    ret
[ 337]        :                                       endp
[ 338]        :                                       
[ 339]    0C19:                                       proc PlayerMove
[ 340]        :                                       ;  /**
[ 341]        :                                       ;  * proc moves pacman spirit
[ 342]        :                                       ;  * gets movement direction with GetKeyStroke
[ 343]        :                                       ;  * checks validity of movement with SetCourse and CheckLocation
[ 344]        :                                       ;  **/
[ 345]        :                                       
[ 346]    0C19: 55                                    push bp
[ 347]    0C1A: 8B EC                                 mov bp, sp
[ 348]        :                                       
[ 349]    0C1C: 50                                    push ax
[ 350]    0C1D: 53                                    push bx
[ 351]    0C1E: 51                                    push cx
[ 352]    0C1F: 52                                    push dx
[ 353]        :                                       
[ 354]    0C20: E8 9D FF                              call GetKeyStroke   ;returns in AH which key was pressed (Up\Right\Down\Left)
[ 355]        :                                       
[ 356]    0C23: E8 2E 00                              call SetCourse      ;sets cursor at desired coordinates
[ 357]        :                                       ;call CheckPosition  ;checks desired coordinates for game elements (walls, points, ghosts...)
[ 358]        :                                       ;iff walls returns W, points  P (at AH)  >>Include in SetCourse<<
[ 359]        :                                       
[ 360]    0C26: 3C 57                                 cmp al, 'W'
[ 361]    0C28: 74 24                                 JE SkipMovement
[ 362]    0C2A: 3C 50                                 cmp al, 'P'
[ 363]    0C2C: 74 00                                 JE PointsEarned
[ 364]        :                                       
[ 365]    0C2E:                                       PointsEarned:
[ 366]    0C2E: A0 15 0A                              mov al, Points
[ 367]    0C31: FE C8                                 dec al
[ 368]    0C33: A2 15 0A                              mov Points, al
[ 369]        :                                       
[ 370]    0C36: B7 00                                 mov bh, 0           ; sets page to 0
[ 371]        :                                       
[ 372]    0C38: B0 20                                 mov al, ' '
[ 373]    0C3A: B3 00                                 mov bl, 00h         ;set color to black
[ 374]    0C3C: B9 00 00                              mov cx, 0           ;print ' ' only once
[ 375]        :                                       
[ 376]    0C3F: B4 09                                 mov ah, 09h
[ 377]    0C41: CD 10                                 int 10h             ;remove pacman spirit from maze
[ 378]        :                                       
[ 379]        :                                       
[ 380]    0C43: B0 40                                 mov al, '@'         ;sets pacman spirit
[ 381]    0C45: B3 0C                                 mov bl, 0ch         ;sets color to light red
[ 382]    0C47: B9 00 00                              mov cx, 0           ;print pacman only once
[ 383]        :                                       
[ 384]    0C4A: B4 09                                 mov ah, 09h
[ 385]    0C4C: CD 10                                 int 10h             ;re-place pacman spirit at maze
[ 386]        :                                       
[ 387]    0C4E:                                       SkipMovement:
[ 388]        :                                       
[ 389]    0C4E: 5A                                    pop dx
[ 390]    0C4F: 59                                    pop cx
[ 391]    0C50: 5B                                    pop bx
[ 392]    0C51: 58                                    pop ax
[ 393]        :                                       
[ 394]    0C52: 5D                                    pop bp
[ 395]        :                                       
[ 396]    0C53: C3                                    ret
[ 397]        :                                       endp
[ 398]        :                                       
[ 399]    0C54:                                       proc SetCourse
[ 400]        :                                       ;  /**
[ 401]        :                                       ;  * proc sets cursor at desired location,
[ 402]        :                                       ;  * checks if movememt s vaild, and updates pacman's Cords
[ 403]        :                                       ;  **/
[ 404]        :                                       
[ 405]    0C54: 55                                    push bp
[ 406]    0C55: 8B EC                                 mov bp, sp
[ 407]        :                                       
[ 408]    0C57: 53                                    push bx
[ 409]    0C58: 52                                    push dx
[ 410]        :                                       
[ 411]    0C59: B7 00                                 mov bh, 0         ;sets page to 0
[ 412]        :                                       
[ 413]    0C5B: 8A 36 13 0A                           mov dh, PlayerRow ;sets dx as pacman's position
[ 414]    0C5F: 8A 16 14 0A                           mov dl, PlayerCol
[ 415]        :                                       
[ 416]    0C63: 80 FC 55                              cmp ah, 'U'
[ 417]    0C66: 74 0F                                 JE SCUp
[ 418]    0C68: 80 FC 52                              cmp ah, 'R'
[ 419]    0C6B: 74 0E                                 JE SCRight
[ 420]    0C6D: 80 FC 44                              cmp ah, 'D'
[ 421]    0C70: 74 0D                                 JE SCDown
[ 422]    0C72: 80 FC 4C                              cmp ah, 'L'
[ 423]    0C75: 74 0C                                 JE SCLeft
[ 424]        :                                       
[ 425]    0C77:                                       SCUp:
[ 426]    0C77: FE CE                                 dec dh
[ 427]    0C79: EB 0A                                 JMP ContSC
[ 428]    0C7B:                                       SCRight:
[ 429]    0C7B: FE C2                                 inc dl
[ 430]    0C7D: EB 06                                 JMP ContSC
[ 431]    0C7F:                                       SCDown:
[ 432]    0C7F: FE C6                                 inc dh
[ 433]    0C81: EB 02                                 JMP ContSC
[ 434]    0C83:                                       SCLeft:
[ 435]    0C83: FE CA                                 dec dl
[ 436]        :                                       
[ 437]    0C85:                                       ContSC:
[ 438]    0C85: B4 02                                 mov ah, 2
[ 439]    0C87: CD 10                                 int 10h             ;sets cursor position at desired location
[ 440]        :                                       
[ 441]    0C89: E8 10 00                              call CheckLocation  ;checks coordinates for game elements
[ 442]        :                                       ;returns char at AL, attribute at AH
[ 443]        :                                       
[ 444]    0C8C: 3C 23                                 cmp al, '#'         ; if wall denies movement in desired direction
[ 445]    0C8E: 74 08                                 JE RejectNewCords
[ 446]        :                                       
[ 447]    0C90: 88 36 13 0A                           mov PlayerRow ,dh
[ 448]    0C94: 88 16 14 0A                           mov PlayerCol ,dl ;updates pacman's position
[ 449]        :                                       
[ 450]    0C98:                                       RejectNewCords:
[ 451]        :                                       
[ 452]    0C98: 5A                                    pop dx
[ 453]    0C99: 5B                                    pop bx
[ 454]        :                                       
[ 455]    0C9A: 5D                                    pop bp
[ 456]        :                                       
[ 457]    0C9B: C3                                    ret
[ 458]        :                                       endp
[ 459]        :                                       
[ 460]    0C9C:                                       proc CheckLocation
[ 461]        :                                       ;  /**
[ 462]        :                                       ;  * proc returns data about current cursor location
[ 463]        :                                       ;  * char at AL, attribute at AH
[ 464]        :                                       ;  **/
[ 465]    0C9C: 55                                    push bp
[ 466]    0C9D: 8B EC                                 mov bp,sp
[ 467]        :                                       
[ 468]    0C9F: 53                                    push bx
[ 469]        :                                       
[ 470]    0CA0: B7 00                                 mov bh, 0     ;sets page to 0
[ 471]    0CA2: B4 08                                 mov ah, 08h   ;reads data of cursor location
[ 472]    0CA4: CD 10                                 int 10h       ;stores char at AL, attribute at AH
[ 473]        :                                       
[ 474]    0CA6: 5B                                    pop bx
[ 475]        :                                       
[ 476]    0CA7: 5D                                    pop bp
[ 477]        :                                       
[ 478]    0CA8: C3                                    ret
[ 479]        :                                       endp
[ 480]        :                                       ends
[ 481]        :                                       
[ 482]        :                                       end start ; set entry point and stop the assembler.
[ 483]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A9      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 08      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: A2      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 03      -   check sum (l.byte)
0013: 1D      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: B2      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: B2      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
